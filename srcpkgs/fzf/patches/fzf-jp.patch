diff --git a/src/algo/algo.go b/src/algo/algo.go
index 2fe5c09..4e88cf5 100644
--- a/src/algo/algo.go
+++ b/src/algo/algo.go
@@ -84,6 +84,7 @@ import (
 	"unicode"
 	"unicode/utf8"
 
+	"github.com/junegunn/fzf/src/migemo"
 	"github.com/junegunn/fzf/src/util"
 )
 
@@ -338,6 +339,15 @@ func debugV2(T []rune, pattern []rune, F []int32, lastIdx int, H []int16, C []in
 	}
 }
 
+func Migemo(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {
+	i := migemo.FindStringIndex(text.ToString(), string(pattern))
+	if i != nil {
+		return Result{i[0], i[0] + i[1], i[1] - i[0]}, nil
+	} else {
+		return Result{-1, -1, 0}, nil
+	}
+}
+
 func FuzzyMatchV2(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {
 	// Assume that pattern is given in lowercase if case-insensitive.
 	// First check if there's a match and calculate bonus for each position.
diff --git a/src/migemo/migemo.go b/src/migemo/migemo.go
new file mode 100644
index 0000000..0e8b5f2
--- /dev/null
+++ b/src/migemo/migemo.go
@@ -0,0 +1,60 @@
+package migemo
+
+import (
+	"os"
+	"regexp"
+	"sync"
+	"unicode/utf8"
+
+	"github.com/koron/gomigemo/embedict"
+	"github.com/koron/gomigemo/migemo"
+)
+
+var cache map[string]*regexp.Regexp
+var dict migemo.Dict
+var mutex *sync.Mutex
+
+func init() {
+	mutex = new(sync.Mutex)
+	cache = make(map[string]*regexp.Regexp)
+	var err error
+	dict, err = embedict.Load()
+	if err != nil {
+		errorExit(err.Error())
+	}
+}
+
+func errorExit(msg string) {
+	os.Stderr.WriteString(msg + "\n")
+	os.Exit(2)
+}
+
+func regex(pattern string) *regexp.Regexp {
+	mutex.Lock()
+	defer mutex.Unlock()
+
+	v, ok := cache[pattern]
+	if ok {
+		return v
+	}
+
+	re, err := migemo.Compile(dict, pattern)
+	if err != nil {
+		errorExit(err.Error())
+	}
+
+	cache[pattern] = re
+	return re
+}
+
+func FindStringIndex(s, pattern string) []int {
+	v := regex(pattern)
+
+	if i := v.FindStringIndex(s); len(i) != 0 {
+		b := []byte(s)
+		subString := string(b[i[0]:i[1]])
+		return []int{utf8.RuneCountInString(s[0:i[0]]), utf8.RuneCountInString(subString)}
+	}
+
+	return nil
+}
diff --git a/src/pattern.go b/src/pattern.go
index 2627dea..c44659f 100644
--- a/src/pattern.go
+++ b/src/pattern.go
@@ -26,6 +26,7 @@ const (
 	termPrefix
 	termSuffix
 	termEqual
+	termMigemo
 )
 
 type term struct {
@@ -145,6 +146,7 @@ func BuildPattern(fuzzy bool, fuzzyAlgo algo.Algo, extended bool, caseMode Case,
 	ptr.procFun[termExact] = algo.ExactMatchNaive
 	ptr.procFun[termPrefix] = algo.PrefixMatch
 	ptr.procFun[termSuffix] = algo.SuffixMatch
+	ptr.procFun[termMigemo] = algo.Migemo
 
 	_patternCache[asString] = ptr
 	return ptr
@@ -208,6 +208,9 @@ func parseTerms(fuzzy bool, caseMode Case, normalize bool, str string) []termSet
 				typ = termFuzzy
 			}
 			text = text[1:]
+		} else if strings.HasPrefix(text, "/") {
+			typ = termMigemo
+			text = text[1:]
 		} else if strings.HasPrefix(text, "^") {
 			if typ == termSuffix {
 				typ = termEqual
